*** Welcome to IELM ***  Type (describe-mode) or press C-h m for help.
ELISP> (setq a-string "hello")
"hello"
ELISP> (a-string)
*** Eval error ***  Symbol’s function definition is void: a-string
ELISP> a-string
"hello"
ELISP> (store-substring a-string 2 " ")
"he lo"
ELISP> (setq a-array '(1 0 0 1))
(1 0 0 1)

ELISP> a-array
(1 0 0 1)

ELISP> (setq a-array '('(1 0 0) '(0 1 0) '(0 0 1)))
('(1 0 0)
  '(0 1 0)
  '(0 0 1))

ELISP> a-array
('(1 0 0)
  '(0 1 0)
  '(0 0 1))

ELISP> (defun read-file (file)
  "read file by name FILE and return content as string"
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (buffer-string)
    )
  )
read-file
ELISP> (setq a-file-content (read-file test_lisp_list.txt))
*** Eval error ***  Symbol’s value as variable is void: test_lisp_list.txt
ELISP> (setq a-file-content (read-file "test_lisp_list.txt"))
*** Eval error ***  Opening input file: No such file or directory, /Users/owenyi/test_lisp_list.txt
ELISP> (setq a-file-content (read-file "./test_lisp_list.txt"))
*** Eval error ***  Opening input file: No such file or directory, /Users/owenyi/test_lisp_list.txt
ELISP> (setq a-file-content (read-file "~/Desktop/Code Projects/Python/Bad_Apple/Autoformatter/elisp_test/test_lisp_list.txt"))
"'('(1 0 0) '(0 1 0) '(0 0 1))
"
ELISP> (read-from-string a-file-content)
('('(1 0 0)
    '(0 1 0)
    '(0 0 1))
  . 29)

ELISP> (eval a-file-content)
"'('(1 0 0) '(0 1 0) '(0 0 1))
"
ELISP> (read-from-string a-file-content)
('('(1 0 0)
    '(0 1 0)
    '(0 0 1))
  . 29)

ELISP> (car (read-from-string a-file-content))
'('(1 0 0)
   '(0 1 0)
   '(0 0 1))

ELISP> (eval (car (read-from-string a-file-content)))
('(1 0 0)
  '(0 1 0)
  '(0 0 1))

ELISP> (setq a-list  (eval (car (read-from-string a-file-content))))
('(1 0 0)
  '(0 1 0)
  '(0 0 1))

ELISP> a-list
('(1 0 0)
  '(0 1 0)
  '(0 0 1))

ELISP> (car a-list)
'(1 0 0)

ELISP> (nth 2 a-list)
'(0 0 1)

ELISP> (nth 1 (nth 0 a-list))
(1 0 0)

ELISP> (nth 0 a-list)
'(1 0 0)

ELISP> a-list
('(1 0 0)
  '(0 1 0)
  '(0 0 1))

ELISP> (nth 0 (nth 1 (nth 0 a-list)))
1 (#o1, #x1, ?\C-a)
ELISP> (nth 0 (nth 0 (nth 0 a-list)))
*** Eval error ***  Wrong type argument: listp, quote
ELISP> (nth 0 (nth 0 a-list))
quote
ELISP> (setq a-list '((1 0 0) (0 1 0) (0 0 1)))
((1 0 0)
 (0 1 0)
 (0 0 1))

ELISP> (nth 2 a-list)
(0 0 1)

ELISP> (nth 1 (nth 2 a-list))
0 (#o0, #x0, ?\C-@)
ELISP> (setq a-file-content (read-file "~/Desktop/Code Projects/Python/Bad_Apple/Autoformatter/elisp_test/test_lisp_list.txt"))
"'((1 0 0) (0 1 0) (0 0 1))
"
ELISP> (read-from-string a-file-content)
('((1 0 0)
   (0 1 0)
   (0 0 1))
  . 26)

ELISP> (car (read-from-string (read-file a-file-content)))
*** Eval error ***  Opening input file: No such file or directory, /Users/owenyi/'((1 0 0) (0 1 0) (0 0 1))

ELISP> (car (read-from-string a-file-content))
'((1 0 0)
  (0 1 0)
  (0 0 1))

ELISP> (setq a-list (eval  (car (read-from-string a-file-content))))
((1 0 0)
 (0 1 0)
 (0 0 1))

ELISP> a-list
((1 0 0)
 (0 1 0)
 (0 0 1))

ELISP> (nth 2 a-list)
(0 0 1)

ELISP> (nth 0 (nth 1 a-list))
0 (#o0, #x0, ?\C-@)
ELISP> (and '(0 1 1) '(1 0 0)) 
(1 0 0)

ELISP> (and '(0 1 1) '(1 0 1)) 
(1 0 1)

ELISP> (and '(0) '(1))
(1)

ELISP> (and '(0) '(0))
(0)

ELISP> (and '(0) '(1))
(1)

ELISP> (and '(1) '(1))
(1)

ELISP> '(0)
(0)

ELISP> (and '(0))
(0)

ELISP> (and 1 1)
1 (#o1, #x1, ?\C-a)
ELISP> (and 1 0)
0 (#o0, #x0, ?\C-@)
ELISP> (xor 1 0)
nil
ELISP> (xor 1 1)
nil
ELISP> (eq 0 '(1 1 0))
nil
ELISP> (equal 0 0)
t
ELISP> (mapcar #'lambda (x) (equal x 0) ' (0 1 0))
*** Eval error ***  Wrong number of arguments: mapcar, 4
ELISP> (mapcar (lambda (x) (equal x 0)) ' (0 1 0))
(t nil t)

ELISP> (- '(0 1 0) '(0 1 1))
*** Eval error ***  Wrong type argument: number-or-marker-p, (0 1 0)
ELISP> (- 1 0)
1 (#o1, #x1, ?\C-a)
ELISP> (- '(1 0 0) '(1 1 1))
*** Eval error ***  Wrong type argument: number-or-marker-p, (1 0 0)
ELISP> (mapcar equal (list-a list-b))
*** Eval error ***  Symbol’s value as variable is void: equal
ELISP> (mapcar equal ('(0 1) '(1 1)))
*** Eval error ***  Symbol’s value as variable is void: equal
ELISP> '(1 1 0) ^ '(1 1 1)
*** IELM error ***  More than one sexp in input
ELISP> (^ '(1 1 0) '(1 1 1)) 
*** Eval error ***  Symbol’s function definition is void: ^
ELISP> (mapcar #'equal '(1 1 1) '(1 0 1))
*** Eval error ***  Wrong number of arguments: mapcar, 3
ELISP> (mapcar #'+ '(1 1 1) '(1 0 1))
*** Eval error ***  Wrong number of arguments: mapcar, 3
ELISP> (mapcar #'+ '(1 2 3) '(4 5 6) '(7 8 9))
*** Eval error ***  Wrong number of arguments: mapcar, 4
ELISP> (mapcar* #'+ '(1 2 3) '(4 5 6) '(7 8 9))
*** Eval error ***  Symbol’s function definition is void: mapcar*
ELISP> (mapcar* #'cons '(1 2 3) '(a b c))
*** Eval error ***  Symbol’s function definition is void: mapcar*
ELISP> (cl-mapcar* #'cons '(1 2 3) '(a b c))
*** Eval error ***  Symbol’s function definition is void: cl-mapcar*
ELISP> (require 'cl-lib)
cl-lib
ELISP> (cl-mapcar* #'cons '(1 2 3) '(a b c))
*** Eval error ***  Symbol’s function definition is void: cl-mapcar*
ELISP> (cl-mapcar '+ '(1 2 3) '(10 20 30)) 
(11 22 33)

ELISP> (setq list-a '(1 0 0))
(1 0 0)

ELISP> (setq list-b '(0 0 0))
(0 0 0)

ELISP> (length list-a)
3 (#o3, #x3, ?\C-c)
ELISP> (cl-mapcar 'equal 'list-a 'list-b)
*** Eval error ***  Wrong type argument: sequencep, list-a
ELISP> (cl-mapcar 'equal '(1 2 3) '(1 2 2))
(t t nil)

ELISP> 'list-a
list-a
ELISP> (cl-mapcar 'equal list-a list-b)
(nil t t)

ELISP> (sum (cl-mapcar 'equal list-a list-b))
*** Eval error ***  Symbol’s function definition is void: sum
ELISP> (apply '+ (cl-mapcar 'equal list-a list-b))
*** Eval error ***  Wrong type argument: number-or-marker-p, nil
ELISP> (nil + t)
*** Eval error ***  Symbol’s function definition is void: nil
ELISP> (+ nil t)
*** Eval error ***  Wrong type argument: number-or-marker-p, nil
ELISP> (+ nil nil)
*** Eval error ***  Wrong type argument: number-or-marker-p, nil
ELISP> (+ 1 nil)
*** Eval error ***  Wrong type argument: number-or-marker-p, nil
ELISP> (mapchar (lambda (x) (if x 1 0 ) (t nil nil)))
*** Eval error ***  Symbol’s function definition is void: mapchar
ELISP> (mapcar (lambda (x) (if x 1 0 ) (t nil nil)))
*** Eval error ***  Wrong number of arguments: mapcar, 1
ELISP> (mapcar (lambda (x) (if x 1 0 )) (t nil nil))
*** Eval error ***  Symbol’s function definition is void: t
ELISP> (mapcar 'null (t nil nil))
*** Eval error ***  Symbol’s function definition is void: t
ELISP> (null t)
nil
ELISP> (mapcar (lambda (x) (if x 1 0)) '(t nil nil))
(1 0 0)

ELISP> (defun percent-similarity (list-a list-b)
  "given two lists of integers LIST-A LIST-B of equal length, calculate how many indexes common"
  (/ (apply '+
	    (mapcar (lambda (x) (if x 1 0)) (cl-mapcar 'equal list-a list-b))
	    )
     (length list-a)
  )
  )


percent-similarity
ELISP> (percent-similarity '(1 1 1) '(1 0 1))
0 (#o0, #x0, ?\C-@)
ELISP> (/ 1 2)
0 (#o0, #x0, ?\C-@)
ELISP> (/ 1.0 2)
0.5
ELISP> (/ 2 3)
0 (#o0, #x0, ?\C-@)
ELISP> (defun percent-similarity (list-a list-b)
  "given two lists of integers LIST-A LIST-B of equal length, calculate how many indexes common"
  (/ (apply '+
	    (mapcar (lambda (x) (if x 1 0)) (cl-mapcar 'equal list-a list-b))
	    )
     (coerce (length list-a) 'float)
  )
  )
percent-similarity
ELISP> (percent-similarity '(1 1 1) '(1 0 1))
*** Eval error ***  Symbol’s function definition is void: coerce
ELISP> (defun percent-similarity (list-a list-b)
  "given two lists of integers LIST-A LIST-B of equal length, calculate how many indexes common"
  (/ (apply '+
	    (mapcar (lambda (x) (if x 1 0)) (cl-mapcar 'equal list-a list-b))
	    )
     (float (length list-a))
  )
  )
percent-similarity
ELISP> (percent-similarity '(1 1 1) '(1 0 1))
0.6666666666666666
ELISP> (percent-similarity '(1 1 1 1 1 1 0) '(1 1 0 0 1 0 1))
0.42857142857142855
ELISP> (/ 3 7.0)
0.42857142857142855
ELISP> (reduce)
*** Eval error ***  Symbol’s function definition is void: reduce
ELISP> (append '(1 0 0) '(0))
(1 0 0 0)

ELISP> (defun pad-list-to-length (list length)
  "given LIST pad 0's to right until correct LENGTH. LENGTH must be longer than length of LIST"
  (append list (make-list (- length (length list))))
 )
pad-list-to-length
ELISP> (pad-list-to-length '(1 0 0) 4)
*** Eval error ***  Wrong number of arguments: make-list, 1
ELISP> (defun pad-list-to-length (list length)
  "given LIST pad 0's to right until correct LENGTH. LENGTH must be longer than length of LIST"
  (append list (make-list (- length (length list)) 0))
 )
pad-list-to-length
ELISP> (pad-list-to-length '(1 0 0) 4)
(1 0 0 0)

ELISP> 